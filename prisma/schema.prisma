generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(64)
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enableRedirect  Boolean   @default(false)
  enableCookiePolicy  Boolean  @default(false)
  tunetPasswordCheck  Boolean  @default(false)
  tunetPasswordCheck  Boolean  @default(false)

  accounts    Account[]
  sessions    Session[]
  profile     UserProfile?       @relation("User-Profile")
  paths       UserPath[]
  skills      UserSkill[]
  milestones  UserMilestone[]
  assessments AssessmentRecord[]
}

model UserProfile {
  userId    Int     @id
  firstName String? @db.VarChar(64)
  lastName  String? @db.VarChar(64)
  bio       String? @db.Text

  user User @relation("User-Profile", fields: [userId], references: [id], onDelete: Cascade)
}

model UserMilestone {
  userId      Int
  milestoneId Int
  completed   Boolean

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@id([userId, milestoneId])
  @@index([userId])
}

model UserPath {
  userId     Int
  pathId     Int
  active     Boolean
  selfScore  Int?
  completion Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  path Path @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@id([userId, pathId])
  @@index([userId])
}

model UserSkill {
  userId        Int
  skillId       Int
  score         Float?
  selfScore     Float?
  assessedScore Float?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@index([userId])
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
  Expert
}

enum SkillType {
  Hard
  Soft
}

model Skill {
  id   Int       @id @default(autoincrement())
  name String    @db.VarChar(64)
  type SkillType

  userSkills                 UserSkill[]
  milestones                 Milestone[]
  milestoneSkillRequirements MilestoneSkillRequirement[]
  paths                      Path[]
}

model Path {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(64)
  icon         String?
  alwaysActive Boolean @default(false)

  milestones Milestone[] @relation("Path-Milestones")
  userPaths  UserPath[]
  skills     Skill[]
}

model Milestone {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(64)
  description String?    @db.Text
  difficulty  Difficulty
  link        String?

  skills            Skill[]
  assessments       Assessment[]                @relation("Milestone-Assessment")
  paths             Path[]                      @relation("Path-Milestones")
  skillRequirements MilestoneSkillRequirement[]
  userMilestones    UserMilestone[]
}

model MilestoneSkillRequirement {
  milestoneId Int
  skillId     Int
  score       Float

  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@unique([milestoneId, skillId])
}

model Assessment {
  id         Int    @id @default(autoincrement())
  name       String
  maxSeconds Int?
  minScore   Int?

  questions  Question[]
  milestones Milestone[]        @relation("Milestone-Assessment")
  records    AssessmentRecord[]
}

model Question {
  id           Int     @id @default(autoincrement())
  assessmentId Int?
  text         String? @db.Text
  /// [QuestionData]
  data         Json

  assessment     Assessment?      @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questionRecord QuestionRecord[]
}

model AssessmentRecord {
  id           Int      @id @default(autoincrement())
  userId       Int
  assessmentId Int?
  createdAt    DateTime @default(now())
  sealed       Boolean  @default(false)

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment Assessment?      @relation(fields: [assessmentId], references: [id])
  questions  QuestionRecord[]

  @@index([userId, sealed])
}

model QuestionRecord {
  id         Int     @id @default(autoincrement())
  recordId   Int
  questionId Int
  index      Int
  sealed     Boolean @default(false)
  /// [QuestionRecordData]
  data       Json?

  record   AssessmentRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  question Question?        @relation(fields: [questionId], references: [id])

  @@unique([recordId, index])
}
