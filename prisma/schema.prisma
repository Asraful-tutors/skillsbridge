generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  profile  UserProfile? @relation("UserProfile")
  paths    UserPath[]
  skills   UserSkill[]

  @@map("users")
}

model UserProfile {
  userId    Int     @id @map("user_id")
  firstName String?
  lastName  String?
  bio       String?

  user User @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPath {
  userId     Int     @map("user_id")
  pathId     Int     @map("path_id")
  active     Boolean
  selfScore  Int     @map("self_score")
  completion Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  path Path @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@id([userId, pathId])
  @@map("user_paths")
}

model UserSkill {
  userId  Int   @map("user_id")
  skillId Int   @map("skill_id")
  score   Float

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_skills")
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
  type String // "hard" or "soft"
  // image String

  userSkills                 UserSkill[]
  milestones                 Milestone[]
  milestoneSkillRequirements MilestoneSkillRequirement[]
  paths                      Path[]
  skillQuestions             SkillQuestion[]

  @@map("skills")
}

model SkillQuestion {
  id      Int     @id @default(autoincrement())
  skillId Int     @map("skill_id")
  text    String?
  type    String // "select" or "text"
  level   Int

  skill   Skill                 @relation(fields: [skillId], references: [id], onDelete: Cascade)
  options SkillQuestionOption[]

  @@map("skill_questions")
}

model SkillQuestionOption {
  id         Int     @id @default(autoincrement())
  questionId Int     @map("question_id")
  text       String
  correct    Boolean @default(false)

  question SkillQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("skill_question_options")
}

model Path {
  id   Int     @id @default(autoincrement())
  name String?
  icon String?

  milestones Milestone[]
  userPaths  UserPath[]
  skills     Skill[]

  @@map("paths")
}

model Milestone {
  id          Int     @id @default(autoincrement())
  pathId      Int     @map("path_id")
  name        String?
  description String?

  skills            Skill[]
  assessments       Assessment[]
  path              Path                        @relation(fields: [pathId], references: [id], onDelete: Cascade)
  skillRequirements MilestoneSkillRequirement[]

  @@map("milestones")
}

model MilestoneSkillRequirement {
  milestoneId Int   @map("milestone_id")
  skillId     Int   @map("skill_id")
  score       Float

  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@unique([skillId, score])
  @@map("milestone_skill_requirements")
}

model Assessment {
  id          Int  @id @default(autoincrement())
  milestoneId Int  @map("milestone_id")
  maxSeconds  Int? @map("max_seconds")
  minScore    Int? @map("min_score")

  questions Question[]
  milestone Milestone  @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model Question {
  id           Int     @id @default(autoincrement())
  assessmentId Int     @map("assessment_id")
  text         String?
  type         String // "select" or "text"

  options    Option[]
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Option {
  id         Int     @id @default(autoincrement())
  questionId Int     @map("question_id")
  text       String
  correct    Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}
